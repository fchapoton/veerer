%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(VeeringTriangulation("(0,~3,2)(1,7,~2)(3,6,~4)(4,8,~5)(5,~7,~6)(~8,~1,~0)", "RBBBRBBRB"), 8, 2)
Curve [1, 0, 0, 1, 0, 1, 1, 0, 1] on 9_eJYds2lu decomposes as: 0
Curve [0, 1, 1, 1, 1, 0, 0, 0, 1] on 9_eJYds2lu decomposes as: 1
Curve [1, 0, 0, 1, 1, 0, 0, 0, 1] on 9_eJYds2lu decomposes as: 1.0.3.~1.~0
Curve [0, 1, 1, 1, 0, 1, 1, 0, 1] on 9_eJYds2lu decomposes as: 3
Curve [0, 0, 1, 1, 0, 0, 1, 1, 0] on 9_eJYds2lu decomposes as: 2

Q: Do 0 and 1 commute? A: Yes.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

(VeeringTriangulation("(0,4,~5)(1,3,~2)(2,5,~3)(~4,~1,~0)", "RBRRRB"), 4, 1)
New vertex cycles:
1: [1, 0, 0, 0, 1, 0]
2: [0, 0, 1, 1, 0, 0]
3: [1, 1, 1, 0, 2, 1]

[1, 0, 0, 0, 1, 0] is already carried
[0, 1, 1, 0, 1, 1] became carried after applying 1
[0, 0, 1, 1, 0, 0] is already carried

Q: Do old and new intersect once? A: Yes.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


(VeeringTriangulation("(0,~3,2)(1,4,~2)(3,5,~4)(~5,~1,~0)", "RRBBRB"), 3, 1)
New vertex cycles:
1: [1, 1, 0, 1, 1, 0]
2: [0, 0, 1, 1, 1, 0]
3: [1, 0, 0, 1, 0, 1]

[1, 1, 0, 1, 1, 0] is already carried
[1, 0, 0, 1, 0, 1] became carried after applying -3.-1
[0, 0, 1, 1, 1, 0] became carried after applying -2.-1

Q: What is the picture here?

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# 28 march 2019: an example of veering triangulation in Q(2,2) which after one
# flip, the vertex cycle that dies can not be made carried by a single Dehn twist
# it belongs to Q(2,2)

V = VeeringTriangulation("(0,~7,6)(1,8,~2)(2,~10,~3)(3,9,~4)(4,~11,~5)(5,10,~6)(7,11,~8)(~9,~1,~0)", "RBBBRRBRRBRB")
V.flip(7, 2)
F = V.flat_structure_middle()
F.plot(vertical_train_track=True)
T = V.to_curver()

# the vertex cycles

c1 = T([1, 0, 1, 2, 1, 0, 1, 0, 1, 1, 1, 1])
c2 = T([0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0])
c3 = T([0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0])
c4 = T([0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1])

# the bad curve

a = T([1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0])

P = V.train_track_polytope()

# the twists along vertex cycles the computer found

twist2 = c2.encode_twist(power=-1)
twist1 = c1.encode_twist(power=-1)
b1 = twist1(twist2(a))
pb1 = ppl.C_Polyhedron(ppl.point(ppl.Linear_Expression(list(b1), 0)))
P.contains(pb1)

# check that after twist along d, the curve a becomes carried

d = T([1,1,2,3,1,0,1,0,1,2,1,1])
twistd = d.encode_twist(power=-1)
b2 = twistd(a)
pb2 = ppl.C_Polyhedron(ppl.point(ppl.Linear_Expression(list(b2), 0)))
P.contains(pb2)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# 29 march: a veering triangulation in H(4)^odd for which after a flip we need
# at least 3 Dehn twist to generate the died vertex cycle

V = VeeringTriangulation("(0,~14,13)(1,10,~2)(2,12,~3)(3,~13,~4)(4,~10,~5)(5,9,~6)(6,11,~7)(7,14,~8)(8,~12,~9)(~11,~1,~0)", "RBBRBBBRRRRRBBB")
V.flip(2, 2)

T = V.to_curver()

c1 = T([0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1])
c2 = T([1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1])
c3 = T([0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0])
c4 = T([0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1, 0, 0])
c5 = T([0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 1])
c6 = T([0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0])

# a became carried after applying 1.3.-1
a = T([0, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1])

t1 = c1.encode(power=1)
t2 = c3.encode(power=-1)
t3 = c1.encode(power=1)



